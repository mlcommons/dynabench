name: Upload image to ECR
on:
 workflow_dispatch:
    inputs:
      branch_name:
        required: true
        description: Name of branch  to deploy.

env:
  AWS_REGION: us-west-1                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: dynabench-dev           # set this to your Amazon ECR repository name
  ECS_SERVICE: dynabench-dev               # set this to your Amazon ECS service name
  ECS_CLUSTER: dynabench-cluster                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ./devops/ecs-task-definition.json # set this to the path to your Amazon ECS task definition
  CONTAINER_NAME: dynabench-container-dev


jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.inputs.branch_name }}

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Do Something with env files
        working-directory: ./api
        env:
          DEV_ENV_FILE: ${{ secrets.ENV_VARIABLES }}
        run:  |
          echo $DEV_ENV_FILE | base64 --decode > .env

      - name: Build, tag, and push image to ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"


      - name: Fill new image ID in the ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Log out of ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
